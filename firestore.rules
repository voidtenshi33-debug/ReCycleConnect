/**
 * @fileoverview Firestore Security Rules for ReCycleConnect.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and prevents unauthorized access to personal information and transactions.
 * Public read access is granted only where explicitly intended.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /items/{itemId}: Stores item listings, publicly readable but writable only by the item owner.
 * - /conversations/{conversationId}: Stores metadata about conversations, accessible only to participants.
 * - /conversations/{conversationId}/messages/{messageId}: Stores individual chat messages, accessible only to conversation participants.
 * - /exchanges/{exchangeId}: Stores exchange requests, accessible only to the requester or seller.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - `conversations` and `messages` are secured to ensure only participants can view chat data.
 * - All write operations require authentication and authorization.
 *
 * Denormalization for Authorization:
 *  The `exchanges` collection requires filtering by either `requesterId` or `sellerId` to ensure that users can only query exchanges relevant to them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource.
     * This function combines the ownership check with the existence check for destructive operations.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource.data != null);
    }

    /**
     * @description Enforces user-ownership for writes and prevents unauthorized data access.
     * @path /users/{userId}
     * @allow (create) - User A can create their own profile document.
     *   auth.uid: "userA", request.resource.data.userId: "userA"
     * @allow (get, update, delete) - User A can read, update, and delete their own profile.
     *   auth.uid: "userA", resource.data.userId: "userA"
     * @deny (create) - User B cannot create a profile document for User A.
     *   auth.uid: "userB", request.resource.data.userId: "userA"
     * @deny (get, update, delete) - User B cannot read, update, or delete User A's profile.
     *   auth.uid: "userB", resource.data.userId: "userA"
     * @principle Enforces strict user-ownership for accessing profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public reading of items, but restricts writes to the item owner.
     * @path /items/{itemId}
     * @allow (get, list) - Any user can view item listings.
     * @allow (create) - User A can create a listing if they are the owner.
     *   auth.uid: "userA", request.resource.data.ownerId: "userA"
     * @allow (update, delete) - User A can update/delete a listing if they are the owner.
     *   auth.uid: "userA", resource.data.ownerId: "userA"
     * @deny (create) - User B cannot create a listing owned by User A.
     *   auth.uid: "userB", request.resource.data.ownerId: "userA"
     * @deny (update, delete) - User B cannot update/delete User A's listing.
     *   auth.uid: "userB", resource.data.ownerId: "userA"
     * @principle Enforces document ownership for writes, while allowing public reads.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Restricts access to conversations to only the participants.
     * @path /conversations/{conversationId}
     * @allow (get, list) - User A can view the conversation if they are a participant.
     *   auth.uid: "userA", resource.data.participants: ["userA", "userB"]
     * @allow (create, update, delete) - Only participants can modify the conversation.
     *   auth.uid: "userA", resource.data.participants: ["userA", "userB"]
     * @deny (get, list) - User C cannot view the conversation if they are not a participant.
     *   auth.uid: "userC", resource.data.participants: ["userA", "userB"]
     * @principle Enforces shared access based on the 'participants' array.
     */
    match /conversations/{conversationId} {
        allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.participants.hasAll([request.auth.uid]) && request.resource.data.participants.size() == 2;
        allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow delete: if false;
    }

    /**
     * @description Restricts access to messages within a conversation to only the participants.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get, list) - User A can view messages if they are a participant in the conversation.
     *   auth.uid: "userA", get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants: ["userA", "userB"]
     * @allow (create) - User A can create a message if they are a participant in the conversation.
     *   auth.uid: "userA", get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants: ["userA", "userB"]
     * @deny (get, list) - User C cannot view messages if they are not a participant in the conversation.
     *   auth.uid: "userC", get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants: ["userA", "userB"]
     * @principle Enforces shared access to subcollection based on the parent document's 'participants' array.
     */
    match /conversations/{conversationId}/messages/{messageId} {
        allow get, list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update, delete: if false;
    }

    /**
     * @description Restricts access to exchanges to only the requester or seller.
     * @path /exchanges/{exchangeId}
     * @allow (get) - User A can view the exchange if they are the requester or seller.
     *   auth.uid: "userA", resource.data.requesterId: "userA" OR resource.data.sellerId: "userA"
     * @allow (list) - User A can query the exchanges collection only if they are filtering by their own user ID in either the requesterId or sellerId field.
     * @allow (create) - User A can create an exchange request if they are the requester or seller.
     *   auth.uid: "userA", request.resource.data.requesterId: "userA" OR request.resource.data.sellerId: "userA"
     * @deny (get) - User C cannot view the exchange if they are not the requester or seller.
     *   auth.uid: "userC", resource.data.requesterId: "userA", resource.data.sellerId: "userB"
     */
    match /exchanges/{exchangeId} {
      allow get: if isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.requesterId == request.auth.uid || request.resource.data.sellerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow delete: if false;
    }
  }
}