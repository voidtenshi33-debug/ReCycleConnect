/**
 * @fileoverview Firestore Security Rules for ReCycleConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model where users own their profiles and can only modify them.
 * Items are publicly readable but can only be created, updated, or deleted by their owners.
 * Conversations are shared between two participants, and only they can read/write messages within the conversation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /items/{itemId}: Stores item listings. Each item has an `ownerId` field.
 * - /conversations/{conversationId}: Top-level collection for chat sessions.
 * - /conversations/{conversationId}/messages/{messageId}: Sub-collection for messages within a specific chat.
 * - /exchanges/{exchangeId}: Stores exchange requests between users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Items are publicly readable but can only be created, updated, or deleted by their owners.
 * - Listing of all users is disallowed.
 * - Conversations and messages are restricted to the participants involved.
 * - Only authenticated users can create exchange requests.
 *
 * Denormalization for Authorization:
 * - The `items` documents denormalize owner information (ownerId, ownerName, ownerAvatarUrl, ownerRating) to avoid costly `get()` calls to the `users` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile.
     * @allow (get, update, delete) Authenticated user accesses their own profile.
     * @deny (create) If the user ID in the request does not match the authenticated user's ID.
     * @deny (get, update, delete) If the user ID in the path does not match the authenticated user's ID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user exists and is the owner of the profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allows a user to create their own profile if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;

      // Only the authenticated user can read their own profile.
      allow get: if isSignedIn() && isOwner(userId);

      // Only the authenticated user can list their own profile.
      allow list: if false;

      // Only the authenticated user can update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Only the authenticated user can delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to item documents.
     * @path /items/{itemId}
     * @allow (get, list) Items are publicly readable.
     * @allow (create) Authenticated user creates an item with their ID as the ownerId.
     * @allow (update, delete) Authenticated user updates or deletes an item they own.
     * @deny (create) If the ownerId in the request does not match the authenticated user's ID.
     * @deny (update, delete) If the user is not the owner of the item.
     * @principle Enforces document ownership for writes, public readability for listings.
     */
    match /items/{itemId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the item.
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      // Helper function to check if the user exists and is the owner of the item.
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      // Items are publicly readable.
      allow get, list: if true;

      // An authenticated user can create an item if they are the owner.
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);

      // Only the owner of the item can update it.
      allow update: if isExistingOwner(resource.data.ownerId);

      // Only the owner of the item can delete it.
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to conversation documents.
     * @path /conversations/{conversationId}
     * @allow (get, list) If the authenticated user is a participant in the conversation.
     * @allow (create) If the authenticated user is a participant in the conversation.
     * @allow (update) If the authenticated user is a participant in the conversation.
     * @allow (delete) If the authenticated user is a participant in the conversation.
     * @deny If the authenticated user is not a participant in the conversation.
     * @principle Enforces shared access: Only participants can access the conversation.
     */
    match /conversations/{conversationId} {
       // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is a participant in the conversation.
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }

      // Helper function to check if the user exists and is a participant of the conversation.
      function isExistingParticipant() {
        return isParticipant() && resource != null;
      }

      // Allows get and list if the user is a participant.
      allow get, list: if isSignedIn() && isParticipant();

      // Allows create if the user is a participant.
      allow create: if isSignedIn() && request.resource.data.participants.hasAll([request.auth.uid]);

      // Allows update if the user is an existing participant.
      allow update: if isSignedIn() && isExistingParticipant();

      // Allows delete if the user is an existing participant.
      allow delete: if isSignedIn() && isExistingParticipant();
    }

    /**
     * @description Controls access to message documents within a conversation.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get, list) If the authenticated user is a participant in the parent conversation.
     * @allow (create) If the authenticated user is a participant in the parent conversation.
     * @allow (update, delete) Denied for security; messages should not be modified or deleted.
     * @deny If the authenticated user is not a participant in the parent conversation.
     * @principle Enforces shared access: Only participants in the conversation can access messages.
     */
    match /conversations/{conversationId}/messages/{messageId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is a participant in the conversation.
      function isParticipant(conversationId) {
        return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAll([request.auth.uid]);
      }

      // Allows get and list if the user is a participant.
      allow get, list: if isSignedIn() && isParticipant(conversationId);

      // Allows create if the user is a participant.
      allow create: if isSignedIn() && isParticipant(conversationId) && request.resource.data.senderId == request.auth.uid;

      // Messages cannot be updated or deleted.
      allow update, delete: if false;
    }

    /**
     * @description Controls access to exchange request documents.
     * @path /exchanges/{exchangeId}
     * @allow (create) Authenticated user can create an exchange request.
     * @allow (get, list) Authenticated user can retrieve exchange requests.
     * @allow (update) Only the seller can update the status.
     * @allow (delete) No deletion of documents.
     * @deny If the authenticated user is not the seller or requester.
     * @principle Enforces creation by authenticated users, controlled updates by participants.
     */
    match /exchanges/{exchangeId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Allows authenticated users to create exchange requests.
      allow create: if isSignedIn();

      // Allows authenticated users to retrieve exchange requests.
      allow get, list: if isSignedIn();

      // Allows the seller to update the status.
      allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;

      // Prevents deletion of documents.
      allow delete: if false;
    }
  }
}