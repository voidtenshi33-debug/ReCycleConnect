/**
 * @fileoverview Firestore Security Rules for ReCycleConnect.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and enforces strict access control for write operations.
 * Read access is more permissive where appropriate (e.g., public item listings).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /items/{itemId}: Stores item listings; publicly readable but writable only by the item owner.
 * - /conversations/{conversationId}: Stores conversation metadata, accessible to participants.
 * - /conversations/{conversationId}/messages/{messageId}: Stores individual chat messages, accessible to participants.
 * - /exchanges/{exchangeId}: Stores exchange requests between users, with access control based on participation.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Item listings are publicly readable but only the owner can modify or delete them.
 * - Conversations and messages are only accessible to the participants.
 * - Listing of the /exchanges collection is denied to all users.
 *
 * Denormalization for Authorization:
 * The `Item` documents contain `ownerId` fields to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, based on the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource, ensuring it exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Enforces document ownership for writes and restricts access to a user's own data tree.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates a profile with userId 'user123'.
     * @allow (get) - User with UID 'user123' retrieves their own profile at /users/user123.
     * @deny (update) - User with UID 'user456' attempts to update the profile at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to item listings while restricting write access to the item owner.
     * @path /items/{itemId}
     * @allow (get, list) - Any user can read item listings.
     * @allow (create) - User with UID 'user123' creates an item with ownerId 'user123'.
     * @deny (update) - User with UID 'user456' attempts to update an item owned by 'user123'.
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to conversations, allowing read/write access only to participants.
     * @path /conversations/{conversationId}
     * @allow (get) - User 'user123' can read the conversation if they are a participant.
     * @allow (create) - If the conversation is between the two users.
     * @deny (get) - User 'user456' tries to read a conversation they are not a part of.
     * @principle Restricts access to shared resources (conversations) to authorized collaborators (participants).
     */
    match /conversations/{conversationId} {
      allow get, create: if request.auth.uid in resource.data.participants;
      allow list: if false;
      allow update: if request.auth.uid in resource.data.participants;
      allow delete: if false;
    }

    /**
     * @description Controls access to messages within a conversation, allowing read/write access only to participants.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (create) - User 'user123' can create a message in a conversation they are a part of.
     * @deny (get) - User 'user456' tries to read messages from a conversation they are not a part of.
     * @principle Restricts access to shared resources (messages) to authorized collaborators (participants).
     */
    match /conversations/{conversationId}/messages/{messageId} {
      allow get, list, create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      allow update, delete: if false;
    }

    /**
     * @description Controls access to exchange requests, allowing read/write access only to participants.
     * @path /exchanges/{exchangeId}
     */
    match /exchanges/{exchangeId} {
      allow get: if request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.sellerId;
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.requesterId || request.auth.uid == request.resource.data.sellerId;
      allow update: if request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.sellerId;
      allow delete: if false;
    }
  }
}