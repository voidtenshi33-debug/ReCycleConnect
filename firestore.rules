rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create profile for another user.
     * @allow (get, list) Authenticated user can read their own profile.
     * @deny (get, list) Authenticated user cannot read other users' profiles, listing is disabled.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (update) Authenticated user cannot update other user profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (delete) Authenticated user cannot delete other user profile.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures item listings.
     * @path /items/{itemId}
     * @allow (get, list) Anyone can read item listings.
     * @allow (create) Authenticated user can create an item listing.
     * @deny (create) An unauthenticated user cannot create an item listing.
     * @allow (update) Only the owner can update their item listing.
     * @deny (update) Other users cannot update item listings.
     * @allow (delete) Only the owner can delete their item listing.
     * @deny (delete) Other users cannot delete item listings.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /items/{itemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Secures conversations between users.
     * @path /conversations/{conversationId}
     * @allow (get) Only participants can read the conversation.
     * @allow (list) Only participants can list the conversation.
     * @allow (create) Only participants can create a conversation.
     * @deny (create) Non-authenticated user cannot create a conversation.
     * @allow (update) Only participants can update a conversation.
     * @deny (update) Other users cannot update conversations.
     * @allow (delete) Only participants can delete the conversation.
     * @deny (delete) Other users cannot delete conversations.
     * @principle Enforces shared access (closed collaborators).
     */
    match /conversations/{conversationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(participants) {
        return request.auth.uid in participants;
      }

       function isNewParticipant(participants) {
        return request.auth.uid in participants;
      }

      function isExistingParticipant(participants) {
        return isSignedIn() && isParticipant(participants);
      }

      allow get: if isSignedIn() && isParticipant(resource.data.participants);
      allow list: if isSignedIn() && isParticipant(resource.data.participants);
      allow create: if isSignedIn() && request.resource.data.participants.hasAll([request.auth.uid]);
      allow update: if isSignedIn() && isParticipant(resource.data.participants);
      allow delete: if isSignedIn() && isParticipant(resource.data.participants);

       match /messages/{messageId} {

            function isSignedIn() {
              return request.auth != null;
            }

            function getConversation() {
              return get(/databases/$(database)/documents/conversations/$(conversationId)).data;
            }

            function isParticipant() {
              return request.auth.uid in getConversation().participants;
            }

             function isNewParticipant() {
              return request.auth.uid in getConversation().participants;
            }

            function isExistingParticipant() {
              return isSignedIn() && isParticipant();
            }
          allow get: if isSignedIn() && isParticipant();
          allow list: if isSignedIn() && isParticipant();
          allow create: if isSignedIn() && isParticipant();
          allow update: if isSignedIn() && isParticipant();
          allow delete: if isSignedIn() && isParticipant();
        }
    }
  }
}