/**
 * @fileoverview Firestore Security Rules for ReCycleConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Each user can only
 * create, read, update, and delete their own profile data.
 *
 * Data Structure:
 * All user profile data is stored under the `/users/{userId}` path, where `{userId}` is the
 * Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration of user accounts.
 * - All writes are validated against the authenticated user's UID to prevent unauthorized
 *   data modification.
 * - The rules do not enforce any schema validation beyond the critical `userId` field.
 *
 * Denormalization for Authorization:
 * The `userId` is used as the document ID in the `/users/{userId}` collection, enabling simple
 * path-based ownership checks. The `userId` field within the document must match the
 * document ID to ensure consistency.
 *
 * Structural Segregation:
 * There are no public or private data concerns in the provided data model. All data under
 * `/users/{userId}` is considered private to the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Each user can only
     *              create, read, update, and delete their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create a profile
     *        if the document ID is 'user_abc' and the userId field is 'user_abc'.
     * @allow (get, list) - Authenticated user with UID 'user_abc' can read their own profile.
     * @allow (update, delete) - Authenticated user with UID 'user_abc' can update or delete
     *        their own profile.
     * @deny (create) - Authenticated user with UID 'user_xyz' cannot create a profile for
     *       'user_abc'.
     * @deny (get, list) - Authenticated user with UID 'user_xyz' cannot read the profile of
     *       'user_abc'.
     * @deny (update, delete) - Authenticated user with UID 'user_xyz' cannot update or delete
     *       the profile of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}