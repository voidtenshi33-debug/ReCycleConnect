rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) User with UID 'user_abc' can create/update/delete their own profile at /users/user_abc.
     * @deny (create, update, delete) User with UID 'user_xyz' cannot create/update/delete the profile at /users/user_abc.
     * @allow (get, list) User with UID 'user_abc' can read their own profile at /users/user_abc.
     * @deny (get, list) User with UID 'user_xyz' cannot read the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to item listings, allowing public reads but restricting writes to the item owner.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read any item.
     * @allow (create) User with UID 'user_abc' can create an item with ownerId: 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create an item with ownerId: 'user_abc'.
     * @allow (update, delete) User with UID 'user_abc' can update/delete an item with ownerId: 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update/delete an item with ownerId: 'user_abc'.
     * @principle Allows public read access with owner-only writes.
     */
    match /items/{itemId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == getSelf().data.ownerId;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/items/$(itemId));
      }

      allow get, list: if true;

      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && getSelf().data.ownerId == request.auth.uid;
      allow delete: if request.auth != null && getSelf().data.ownerId == request.auth.uid;
    }

    /**
     * @description Manages conversations between users, ensuring only participants can access them.
     * @path /conversations/{conversationId}
     * @allow (get, list) User 'user_abc' can read a conversation document if 'user_abc' is in the 'participants' array.
     * @deny (get, list) User 'user_xyz' cannot read a conversation document if 'user_xyz' is not in the 'participants' array.
     * @allow (create) User 'user_abc' can create a conversation document if 'user_abc' is in the 'participants' array.
     * @deny (create) User 'user_xyz' cannot create a conversation document if 'user_xyz' is not in the 'participants' array.
     * @allow (update, delete) User 'user_abc' can update/delete a conversation document if 'user_abc' is in the 'participants' array and resource exists.
     * @deny (update, delete) User 'user_xyz' cannot update/delete a conversation document if 'user_xyz' is not in the 'participants' array.
     * @principle Restricts access to shared conversation documents based on participant list.
     */
    match /conversations/{conversationId} {
      function isParticipant() {
        return request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      }
      allow get, list: if request.auth != null && getSelf().data.participants.hasAny([request.auth.uid]);

      function getSelf() {
        return get(/databases/$(database)/documents/conversations/$(conversationId));
      }

      allow create: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow update: if request.auth != null && getSelf().data.participants.hasAny([request.auth.uid]);
      allow delete: if request.auth != null && getSelf().data.participants.hasAny([request.auth.uid]);
    }

    /**
     * @description Controls access to messages within a conversation, allowing only participants to read and write.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (get, list) User 'user_abc' can read a message if 'user_abc' is a participant in the parent conversation.
     * @deny (get, list) User 'user_xyz' cannot read a message if 'user_xyz' is not a participant in the parent conversation.
     * @allow (create) User 'user_abc' can create a message if 'user_abc' is a participant in the parent conversation.
     * @deny (create) User 'user_xyz' is not a participant in the parent conversation.
     * @allow (update, delete) User 'user_abc' can update/delete a message if 'user_abc' is a participant in the parent conversation.
     * @deny (update, delete) User 'user_xyz' cannot update/delete a message if 'user_xyz' is not a participant in the parent conversation.
     * @principle Enforces shared access for messages within a conversation.
     */
    match /conversations/{conversationId}/messages/{messageId} {
       function isConversationParticipant(conversationId) {
         return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }

      allow get, list: if request.auth != null && isConversationParticipant(conversationId);
      allow create: if request.auth != null && isConversationParticipant(conversationId);
      allow update: if request.auth != null && isConversationParticipant(conversationId);
      allow delete: if request.auth != null && isConversationParticipant(conversationId);
    }

    /**
     * @description Manages exchange requests between users, allowing only involved parties to access them.
     * @path /exchanges/{exchangeId}
     * @allow (get, list) User 'user_abc' can read an exchange request if they are the requester or seller.
     * @deny (get, list) User 'user_xyz' cannot read an exchange request if they are neither the requester nor the seller.
     * @allow (create) User 'user_abc' can create an exchange request if they are the requester.
     * @deny (create) User 'user_xyz' cannot create an exchange request if they are not the requester.
     * @allow (update, delete) User 'user_abc' can update/delete an exchange request if they are the seller.
     * @deny (update, delete) User 'user_xyz' cannot update/delete an exchange request if they are not the seller.
     * @principle Restricts access to exchange requests to the involved parties.
     */
    match /exchanges/{exchangeId} {
      function isRequester() {
        return request.auth != null && request.auth.uid == request.resource.data.requesterId;
      }

      function isSeller() {
        return request.auth != null && request.auth.uid == getSelf().data.sellerId;
      }

      function getSelf() {
        return get(/databases/$(database)/documents/exchanges/$(exchangeId));
      }

      allow get, list: if request.auth != null && (getSelf().data.requesterId == request.auth.uid || getSelf().data.sellerId == request.auth.uid);
      allow create: if isRequester();
      allow update: if request.auth != null && getSelf().data.sellerId == request.auth.uid;
      allow delete: if request.auth != null && getSelf().data.sellerId == request.auth.uid;
    }
  }
}