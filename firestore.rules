/**
 * @fileoverview Firestore Security Rules for ReCycleConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the Firebase auth UID.
 * - /items/{itemId}: Stores item data with an ownerId field indicating the item's owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Items are publicly readable, but only the owner can create, update, or delete them.
 * - Listing all user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Items contain an `ownerId` field, denormalizing the user relationship to enable owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'userId' can create their profile.
     * @allow (get, update, delete) User with UID 'userId' can get, update, and delete their profile.
     * @deny (create, get, update, delete) Any other user cannot create, get, update, or delete this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to item documents. Items are publicly readable, but only the owner can modify them.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read any item.
     * @allow (create) User can create an item if the ownerId matches their UID.
     * @allow (update, delete) Only the owner of the item can update or delete it.
     * @deny (create, update, delete) If the user is not signed in, they cannot create, update or delete an item.
     * @principle Enforces public read access with owner-only writes for items.
     */
    match /items/{itemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
      * @description Controls access to exchange documents. All authenticated users can list.
      * @path /exchanges
      * @allow (list) Any authenticated user can list exchanges.
      */
     match /exchanges/{exchangeId} {
       function isSignedIn() {
         return request.auth != null;
       }

       allow get: if false;
       allow list: if isSignedIn();
       allow create: if false;
       allow update: if false;
       allow delete: if false;
     }
  }
}