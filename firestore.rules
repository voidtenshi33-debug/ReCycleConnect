rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'I3l03MNYHuhVLMYi2VxIIbgJVtv2' can create their own profile.
     * @allow (get, update, delete) User with UID 'I3l03MNYHuhVLMYi2VxIIbgJVtv2' can read, update, and delete their own profile.
     * @deny (create) User with UID 'attackerUID' cannot create a profile with userId 'differentUID'.
     * @deny (get, update, delete) User with UID 'attackerUID' cannot read, update, or delete the profile of user with UID 'differentUID'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to item documents.
     * @path /items/{itemId}
     * @allow (get, list) Any user can read any item.
     * @allow (create) User with UID 'I3l03MNYHuhVLMYi2VxIIbgJVtv2' can create an item with ownerId 'I3l03MNYHuhVLMYi2VxIIbgJVtv2'.
     * @allow (update, delete) User with UID 'I3l03MNYHuhVLMYi2VxIIbgJVtv2' can update/delete their own item where item.ownerId == 'I3l03MNYHuhVLMYi2VxIIbgJVtv2'.
     * @deny (create) User with UID 'attackerUID' cannot create an item with ownerId 'differentUID'.
     * @deny (update, delete) User with UID 'attackerUID' cannot update/delete an item with ownerId 'differentUID'.
     * @principle Allows public reads, but restricts writes to the item owner.
     */
    match /items/{itemId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(ownerId) {
            return request.auth.uid == ownerId;
        }
        function isExistingOwner(ownerId) {
            return isOwner(ownerId) && exists(resource);
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to conversation documents.
     * @path /conversations/{conversationId}
     * @allow (create, get) User can only read a converation if they are a participant
     * @allow (update) Only conversation participants can update a conversation.
     * @deny (create) User with UID 'attackerUID' cannot create a conversation with participants not including attackerUID.
     * @deny (update) User with UID 'attackerUID' cannot update a conversation if not a participant.
     * @principle Allows public reads, but restricts writes to the item owner.
     */
    match /conversations/{conversationId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isParticipant() {
            return request.auth.uid in resource.data.participants;
        }
          function isParticipantOnCreate() {
            return request.auth.uid in request.resource.data.participants;
        }
        function isExistingParticipant() {
            return isParticipant() && exists(resource);
        }
      allow get: if isSignedIn() && isParticipant();
      allow list: if false; // Listing conversations is disabled for security reasons.
      allow create: if isSignedIn() && isParticipantOnCreate();
      allow update: if isSignedIn() && isParticipant();
      allow delete: if false;
    }

    /**
     * @description Controls access to message documents within a conversation.
     * @path /conversations/{conversationId}/messages/{messageId}
     * @allow (create, get) User can only read a message if they are a participant
     * @allow (update) Only conversation participants can update a conversation.
     * @deny (create) User with UID 'attackerUID' cannot create a message with participants not including attackerUID.
     * @deny (update) User with UID 'attackerUID' cannot update a message if not a participant.
     * @principle Allows public reads, but restricts writes to the item owner.
     */
    match /conversations/{conversationId}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isParticipant(conversationId) {
            return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
        function conversationExists(conversationId) {
            return exists(/databases/$(database)/documents/conversations/$(conversationId));
        }
         function isParticipantInline() {
            return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
      allow get: if isSignedIn() && conversationExists(conversationId) && isParticipantInline();
      allow list: if false;
      allow create: if isSignedIn() && conversationExists(conversationId) && isParticipantInline();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to exchange request documents.
      * @path /exchanges/{exchangeId}
      * @allow (get, list) Any authenticated user can view all the exchange requests.
      * @allow (create) Only an authenticated user can create an exchange request.
      * @allow (update) Only the seller can update the status of an exchange request.
      * @deny (delete) No one can delete an exchange request.
      * @principle Allows public reads, but restricts writes to the item owner.
      */
     match /exchanges/{exchangeId} {
        function isSignedIn() {
            return request.auth != null;
        }
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid;
       allow update: if isSignedIn() && resource.data.sellerId == request.auth.uid;
       allow delete: if false;
     }
  }
}